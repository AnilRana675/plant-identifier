import React, { useRef, useState, useEffect } from 'react';

// Helper function to format agricultural info into categories and indentation
function formatAgriDetails(text) {
  const lines = text.split(/\r?\n/).filter(l => l.trim() !== '');
  const categories = [
    { key: 'Cultivating methods', color: '#166534' },
    { key: 'Harvesting methods', color: '#166534' },
    { key: 'Possible diseases', color: '#b91c1c' },
    { key: 'Manure needed', color: '#92400e' },
    { key: 'Time period for maturing', color: '#0c4a6e' }
  ];
  let elements = [];
  let currentCat = null;
  let buffer = [];
  lines.forEach((line, idx) => {
    const cat = categories.find(c => line.toLowerCase().includes(c.key.toLowerCase()));
    if (cat) {
      if (currentCat && buffer.length) {
        elements.push(
          <div key={currentCat.key + idx} style={{ marginLeft: '16px', marginBottom: '8px' }}>
            <strong style={{ color: currentCat.color }}>{currentCat.key}:</strong>
            <ul style={{ marginLeft: '16px' }}>
              {buffer.map((b, i) => <li key={i}>{b.replace(/^[-•\s]+/, '')}</li>)}
            </ul>
          </div>
        );
      }
      currentCat = cat;
      buffer = [];
      const rest = line.replace(new RegExp(cat.key, 'i'), '').trim();
      if (rest) buffer.push(rest);
    } else if (currentCat) {
      buffer.push(line);
    }
  });
  if (currentCat && buffer.length) {
    elements.push(
      <div key={currentCat.key + 'last'} style={{ marginLeft: '16px', marginBottom: '8px' }}>
        <strong style={{ color: currentCat.color }}>{currentCat.key}:</strong>
        <ul style={{ marginLeft: '16px' }}>
          {buffer.map((b, i) => <li key={i}>{b.replace(/^[-•\s]+/, '')}</li>)}
        </ul>
      </div>
    );
  }
  if (elements.length === 0) {
    return <pre style={{ whiteSpace: 'pre-wrap', fontSize: '1rem', color: '#92400e', margin: 0 }}>{text}</pre>;
  }
  return elements;
}

// Main App component
const App = () => {
  // Refs for video and canvas elements
  const videoRef = useRef(null);
  const canvasRef = useRef(null);

  // State variables for managing the application's data and UI
  const [stream, setStream] = useState(null); // Stores the camera stream
  const [capturedImage, setCapturedImage] = useState(null); // Stores the captured image as base64
  const [photoDetails, setPhotoDetails] = useState(null); // Stores details about the photo
  const [plantName, setPlantName] = useState("No plant identified yet."); // Stores the identified plant name
  const [plantDetails, setPlantDetails] = useState(null); // Stores details about the identified plant
  const [agriDetails, setAgriDetails] = useState(null); // Stores agricultural info from Gemini
  const [loading, setLoading] = useState(false); // Indicates if an API call is in progress
  const [error, setError] = useState(null); // Stores any error messages

  // Effect hook to clean up the camera stream when the component unmounts
  useEffect(() => {
    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop()); // Stop all tracks in the stream
      }
    };
  }, [stream]); // Re-run effect if stream changes

  // Function to start the camera
  const startCamera = async () => {
    setCapturedImage(null); // Clear any previously captured image
    setPlantName("No plant identified yet."); // Reset plant name
    setError(null); // Clear any previous errors
    try {
      // Request access to the user's video camera
      const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });
      setStream(mediaStream); // Store the stream in state
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream; // Set the video element's source to the stream
        videoRef.current.play(); // Play the video
      }
    } catch (err) {
      console.error("Error accessing camera:", err);
      setError("Failed to access camera. Please ensure you have a camera connected and grant permissions.");
    }
  };

  // Function to take a photo from the video feed
  // Function to handle image upload from device
  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setCapturedImage(reader.result);
        setPlantName("Image uploaded. Click 'Identify Plant' to get the name.");
        setError(null);
        setPhotoDetails({
          name: file.name,
          type: file.type,
          size: file.size
        });
      };
      reader.readAsDataURL(file);
    }
  };
  const takePhoto = () => {
    if (videoRef.current && canvasRef.current) {
      const video = videoRef.current;
      const canvas = canvasRef.current;

      // Set canvas dimensions to match the video feed
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      const context = canvas.getContext('2d');
      // Draw the current video frame onto the canvas
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Get the image data as a base64 encoded PNG
      const imageData = canvas.toDataURL('image/png');
      setCapturedImage(imageData); // Store the captured image
      setPlantName("Image captured. Click 'Identify Plant' to get the name."); // Update status message
      setPhotoDetails({
        name: 'Camera Capture',
        type: 'image/png',
        size: imageData.length // base64 string length
      });
    } else {
      setError("Camera not active. Please start the camera first.");
    }
  };

  // Function to identify the plant using the Gemini API
  const identifyPlant = async () => {
    if (!capturedImage) {
      setError("No image captured. Please take a photo first.");
      return;
    }

    setLoading(true); // Set loading state to true
    setError(null); // Clear previous errors
    setPlantName("Identifying plant..."); // Update status message
    setPlantDetails(null); // Clear previous plant details

    try {
      // Extract base64 data from the image URL (remove "data:image/png;base64,")
      const base64ImageData = capturedImage.split(',')[1];

      let chatHistory = [];
      const prompt = "Identify the plant in this image. Provide only the common name of the plant, or 'Unknown plant' if you cannot identify it. Do not include any other text or explanation.";
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });

      const payload = {
        contents: [
          {
            role: "user",
            parts: [
              { text: prompt },
              {
                inlineData: {
                  mimeType: "image/png",
                  data: base64ImageData
                }
              }
            ]
          }
        ],
      };

      // API key is left empty as it will be provided by the Canvas environment
      const apiKey = "AIzaSyB-MAuRk0Ja7qZZmNP0hwKQ-55ofqk9kJE";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      // Make the API call to Gemini
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      // Check if the response contains the identified plant name
      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        const plant = text.trim();
        setPlantName(plant); // Set the identified plant name

        // Fetch plant details from Wikipedia API
        if (plant && plant !== 'Unknown plant') {
          try {
            const wikiResponse = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(plant)}`);
            if (wikiResponse.ok) {
              const wikiData = await wikiResponse.json();
              setPlantDetails({
                title: wikiData.title,
                description: wikiData.description,
                extract: wikiData.extract,
                image: wikiData.thumbnail ? wikiData.thumbnail.source : null,
                url: wikiData.content_urls ? wikiData.content_urls.desktop.page : null
              });
            } else {
              setPlantDetails({ error: 'No details found for this plant.' });
            }
          } catch (err) {
            setPlantDetails({ error: 'Error fetching plant details.' });
          }

          // Ask Gemini for agricultural details
          try {
            const agriPrompt = `For the plant '${plant}', provide the following details in clear bullet points:\n- Cultivating methods\n- Harvesting methods\n- Possible diseases\n- Manure needed\n- Time period for maturing`;
            const agriPayload = {
              contents: [
                {
                  role: "user",
                  parts: [
                    { text: agriPrompt }
                  ]
                }
              ]
            };
            const agriResponse = await fetch(apiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(agriPayload)
            });
            const agriResult = await agriResponse.json();
            if (agriResult.candidates && agriResult.candidates.length > 0 &&
                agriResult.candidates[0].content && agriResult.candidates[0].content.parts &&
                agriResult.candidates[0].content.parts.length > 0) {
              setAgriDetails(agriResult.candidates[0].content.parts[0].text);
            } else {
              setAgriDetails('No agricultural details found.');
            }
          } catch (err) {
            setAgriDetails('Error fetching agricultural details.');
          }
        }
    setAgriDetails(null); // Clear previous agri details
      } else {
        setPlantName("Could not identify the plant. Please try again with a clearer image.");
        setPlantDetails(null);
        console.error("Unexpected API response structure:", result);
      }
    } catch (err) {
      console.error("Error identifying plant:", err);
      setError("An error occurred during identification. Please try again.");
      setPlantName("Identification failed.");
    } finally {
      setLoading(false); // Set loading state to false
    }
  };

  return (
    <div style={{ minHeight: '100vh', background: 'linear-gradient(to bottom right, #e6ffe6, #e6f7ff)', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', fontFamily: 'sans-serif', padding: '16px' }}>
      <div style={{ background: '#fff', padding: '32px', borderRadius: '16px', boxShadow: '0 4px 24px rgba(0,0,0,0.08)', maxWidth: '600px', width: '100%', textAlign: 'center', border: '2px solid #6ee7b7' }}>
        <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#15803d', marginBottom: '24px', letterSpacing: '-1px' }}>
          🌿 Plant Identifier
        </h1>

        {/* Camera Feed Section */}
        <div style={{ marginBottom: '24px', background: '#f3f4f6', borderRadius: '12px', overflow: 'hidden', boxShadow: '0 2px 8px rgba(0,0,0,0.04)', border: '1px solid #e5e7eb' }}>
          <video ref={videoRef} style={{ width: '100%', height: 'auto', borderRadius: '12px' }} autoPlay playsInline muted></video>
          {/* Canvas is hidden, used for image capture */}
          <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>
        </div>

        {/* Controls Section */}
        <div style={{ display: 'flex', flexDirection: 'column', gap: '16px', marginBottom: '24px' }}>
          <button
            onClick={startCamera}
            style={{ background: '#22c55e', color: '#fff', fontWeight: 'bold', padding: '12px 24px', borderRadius: '999px', boxShadow: '0 2px 8px rgba(34,197,94,0.15)', border: 'none', cursor: 'pointer', marginBottom: '8px' }}
          >
            Start Camera
          </button>
          <button
            onClick={takePhoto}
            disabled={!stream}
            style={{ background: !stream ? '#93c5fd' : '#3b82f6', color: '#fff', fontWeight: 'bold', padding: '12px 24px', borderRadius: '999px', boxShadow: '0 2px 8px rgba(59,130,246,0.15)', border: 'none', cursor: !stream ? 'not-allowed' : 'pointer', opacity: !stream ? 0.5 : 1, marginBottom: '8px' }}
          >
            Take Photo
          </button>
          <label style={{ fontWeight: 'bold', marginBottom: '8px' }}>
            <span style={{ marginRight: '8px' }}>Or upload a photo:</span>
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              style={{ marginTop: '8px' }}
            />
          </label>
          <button
            onClick={identifyPlant}
            disabled={!capturedImage || loading}
            style={{ background: (!capturedImage || loading) ? '#c4b5fd' : '#a21caf', color: '#fff', fontWeight: 'bold', padding: '12px 24px', borderRadius: '999px', boxShadow: '0 2px 8px rgba(168,85,247,0.15)', border: 'none', cursor: (!capturedImage || loading) ? 'not-allowed' : 'pointer', opacity: (!capturedImage || loading) ? 0.5 : 1, marginBottom: '8px' }}
          >
            {loading ? 'Identifying...' : 'Identify Plant'}
          </button>
        </div>

        {/* Captured Image Display */}
        {capturedImage && (
          <div style={{ marginBottom: '24px' }}>
            <h2 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#374151', marginBottom: '12px' }}>Captured Image:</h2>
            <img
              src={capturedImage}
              alt="Captured Plant"
              style={{ maxWidth: '100%', height: 'auto', borderRadius: '12px', boxShadow: '0 2px 8px rgba(0,0,0,0.08)', margin: '0 auto', border: '1px solid #d1d5db' }}
              onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/400x300/cccccc/333333?text=Image+Load+Error"; }}
            />
            {photoDetails && (
              <div style={{ marginTop: '12px', fontSize: '1rem', color: '#374151', background: '#f3f4f6', borderRadius: '8px', padding: '8px', display: 'inline-block' }}>
                <div><strong>Photo Details:</strong></div>
                <div>Name: {photoDetails.name}</div>
                <div>Type: {photoDetails.type}</div>
                <div>Size: {photoDetails.size} {photoDetails.name === 'Camera Capture' ? 'bytes (base64 length)' : 'bytes'}</div>
              </div>
            )}
          </div>
        )}

        {/* Result Display */}
        <div style={{ background: '#f0fdf4', padding: '16px', borderRadius: '12px', boxShadow: '0 2px 8px rgba(0,0,0,0.04)', border: '1px solid #bbf7d0', marginBottom: '8px' }}>
          <h2 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#166534', marginBottom: '8px' }}>Identification Result:</h2>
          <div style={{ marginBottom: '16px', textAlign: 'left' }}>
            <h3 style={{ fontSize: '1.3rem', fontWeight: 'bold', color: '#14532d', marginBottom: '8px' }}>Name</h3>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#14532d', wordBreak: 'break-word', marginBottom: '16px', marginLeft: '16px' }}>{plantName}</div>
          </div>
          {agriDetails && (
            <div style={{ marginBottom: '16px', textAlign: 'left', background: '#fef9c3', borderRadius: '8px', padding: '12px' }}>
              <h3 style={{ fontSize: '1.1rem', fontWeight: 'bold', color: '#92400e', marginBottom: '8px' }}>Agricultural Info</h3>
              {formatAgriDetails(agriDetails)}
            </div>
          )}
          {plantDetails && !plantDetails.error && (
            <div style={{ marginTop: '0', textAlign: 'left', background: '#e0f2fe', borderRadius: '8px', padding: '12px' }}>
              <h3 style={{ fontSize: '1.1rem', fontWeight: 'bold', color: '#0c4a6e', marginBottom: '8px' }}>Plant Details</h3>
              {plantDetails.image && (
                <img src={plantDetails.image} alt={plantDetails.title} style={{ maxWidth: '120px', borderRadius: '8px', marginBottom: '8px' }} />
              )}
              <div><strong>{plantDetails.title}</strong></div>
              <div style={{ fontStyle: 'italic', marginBottom: '8px' }}>{plantDetails.description}</div>
              <div>{plantDetails.extract}</div>
              {plantDetails.url && (
                <div style={{ marginTop: '8px' }}>
                  <a href={plantDetails.url} target="_blank" rel="noopener noreferrer" style={{ color: '#2563eb', textDecoration: 'underline' }}>Read more on Wikipedia</a>
                </div>
              )}
            </div>
          )}
          {plantDetails && plantDetails.error && (
            <div style={{ marginTop: '16px', color: '#b91c1c', background: '#fee2e2', borderRadius: '8px', padding: '8px' }}>
              {plantDetails.error}
            </div>
          )}
        </div>

        {/* Error Message Display */}
        {error && (
          <div style={{ marginTop: '16px', padding: '12px', background: '#fee2e2', border: '1px solid #f87171', color: '#b91c1c', borderRadius: '8px', boxShadow: '0 2px 8px rgba(0,0,0,0.04)' }}>
            <p style={{ fontWeight: '500' }}>Error:</p>
            <p>{error}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;